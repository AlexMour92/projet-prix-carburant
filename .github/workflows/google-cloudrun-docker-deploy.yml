name: Déployer sur Cloud Run avec GitHub Actions

on:
  push:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  JOB_NAME: 'prod-carburant-etl'
  REGION: ${{ secrets.GCP_REGION }}

jobs:
  test-build-deploy:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout du code
        uses: actions/checkout@v3

      - name: Configurer Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.12'  # Ajustez selon votre version de Python

      - name: Installer les dépendances
        run: |
          cd project_code
          cd app
          pip install -r requirements.txt

      - name: Configurer les variables d'environnement pour les tests
        run: |
          echo "GOOGLE_APPLICATION_CREDENTIALS_JSON=$(echo '${{ secrets.BIGQUERY_SA_KEY }}' | base64 -w 0)" >> $GITHUB_ENV
      
      - name: Exécuter les tests unittest
        run: |
          export PYTHONPATH=$PYTHONPATH:${{ github.workspace }}
          cd project_code
          python -m unittest discover -v app

      - name: Configurer l'authentification Google Cloud
        uses: google-github-actions/auth@v1
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Configurer Google Cloud SDK
        uses: google-github-actions/setup-gcloud@v1
        with:
          project_id: ${{ env.PROJECT_ID }}

      - name: Vérifier la configuration du projet
        run: |
          gcloud config get-value project
          gcloud projects describe ${{ env.PROJECT_ID }}

      - name: Configurer Docker
        run: gcloud auth configure-docker gcr.io

      - name: Construire l'image Docker
        run: |
          cd project_code
          docker build -t gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{ github.sha }} .

      - name: Pousser l'image Docker
        run: docker push gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{ github.sha }}

      - name: Mise à jour ou création du Job sur Cloud Run
        run: |
          if gcloud run jobs describe ${{ env.JOB_NAME }} --region=${{ env.REGION }} &> /dev/null; then
            echo "Le job existe, mise à jour en cours..."
            gcloud run jobs update ${{ env.JOB_NAME }} \
              --image gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{ github.sha }} \
              --region ${{ env.REGION }} \
              --set-env-vars=PROJECT_ID=${{ env.PROJECT_ID }},GOOGLE_APPLICATION_CREDENTIALS_JSON=${{ secrets.BIGQUERY_SA_KEY }} \
              --max-retries=3 \
              --task-timeout=3600s
          else
            echo "Le job n'existe pas, création en cours..."
            gcloud run jobs create ${{ env.JOB_NAME }} \
              --image gcr.io/${{ env.PROJECT_ID }}/${{ env.JOB_NAME }}:${{ github.sha }} \
              --region ${{ env.REGION }} \
              --set-env-vars=PROJECT_ID=${{ env.PROJECT_ID }},GOOGLE_APPLICATION_CREDENTIALS_JSON=${{ secrets.BIGQUERY_SA_KEY }} \
              --max-retries=3 \
              --task-timeout=3600s
          fi
